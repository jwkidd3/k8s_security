
10:40:51 From John to Everyone : https://kubernetes.io/docs/concepts/security/overview/
10:50:01 From John to Everyone : https://docs.google.com/document/d/1OefvSpURuOHdNNiwbRXmhPiRUFsYnllgMPDaVqXRkh4/edit#heading=h.103h3sl9l9vt
11:03:35 From John to Everyone : https://github.com/magnologan/awesome-k8s-security
11:21:06 From John to Everyone : https://www.katacoda.com/ishswar/scenarios/cka-csr-usr
11:54:23 From John to Everyone : https://www.katacoda.com/joebert/scenarios/weave'
12:02:33 From John to Everyone : cat /sys/module/apparmor/parameters/enabled
12:03:50 From John to Everyone : sudo cat /sys/kernel/security/apparmor/profiles | sort
12:04:50 From John to Everyone : kubectl get nodes -o=jsonpath=$'{range .items[*]}{@.metadata.name}: {.status.conditions[?(@.reason=="KubeletReady")].message}\n{end}'
12:06:12 From John to Everyone : sudo apparmor_parser -q <<EOF
#include <tunables/global>

profile k8s-apparmor-example-deny-write flags=(attach_disconnected) {
  #include <abstractions/base>

  file,

  # Deny all file writes.
  deny /** w,
}
EOF
12:07:31 From John to Everyone : apiVersion: v1
kind: Pod
metadata:
  name: hello-apparmor
  annotations:
    # Tell Kubernetes to apply the AppArmor profile "k8s-apparmor-example-deny-write".
    # Note that this is ignored if the Kubernetes node is not running version 1.4 or greater.
    container.apparmor.security.beta.kubernetes.io/hello: localhost/k8s-apparmor-example-deny-write
spec:
  containers:
  - name: hello
    image: busybox
    command: [ "sh", "-c", "echo 'Hello AppArmor!' && sleep 1h" ]
12:10:22 From John to Everyone : kubectl exec hello-apparmor cat /proc/1/attr/current
12:14:30 From John to Everyone : https://kubernetes.io/docs/tutorials/clusters/seccomp/
12:16:32 From John to Everyone : kubectl create deployment nginx --image=nginx
12:16:47 From John to Everyone : kubectl expose deployment nginx --port=80
12:18:19 From John to Everyone : kubectl run busybox --rm -ti --image=busybox -- /bin/sh
12:18:45 From John to Everyone : wget --spider --timeout=1 nginx
12:19:51 From John to Everyone : apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: "true"
12:28:54 From John to Everyone : https://katacoda.com/madhuakula/scenarios/kubernetes-goat

15:25:05 From John to Everyone : https://www.cisecurity.org/benchmark/kubernetes/
15:25:39 From John to Everyone : curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.3.1/kube-bench_0.3.1_linux_amd64.deb -o kube-bench_0.3.1_linux_amd64.deb

sudo apt install ./kube-bench_0.3.1_linux_amd64.deb -f
15:31:42 From John to Everyone : kube-bench run --targets master,node,etcd,policies
15:36:48 From John to Everyone : https://github.com/Checkmarx/kics/releases/download/v1.3.2/kics_1.3.2_linux_x64.tar.gz
15:44:48 From John to Everyone : sudo apt-get install wget apt-transport-https gnupg lsb-release
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy
15:46:56 From John to Everyone : madhuakula/hacker-container
16:19:48 From John to Everyone : https://www.openpolicyagent.org/docs/latest/policy-language/
16:21:09 From John to Everyone : https://katacoda.com/madhuakula/scenarios/docker-security-checker
16:30:14 From Marcelo Giles to Everyone : https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/
